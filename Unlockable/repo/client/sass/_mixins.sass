@import '_vars'

=wh($size: 100%)
  width: $size
  height: $size

=pseudo($blockType: block)
  display: $blockType
  content: ''

=base_a($acolor: black, $deco_lnk: none, $deco_vis: none, $deco_hov: none, $deco_act: none)
  a:link
    color: $acolor
    text-decoration: $deco_lnk
  a:visited
    color: $acolor
    text-decoration: $deco_vis
  a:hover
    color: $acolor
    text-decoration: $deco_hov
  a:active
    color: $acolor
    text-decoration: $deco_act

=horizontal($marginRight: 10px)
  display: inline-block
  vertical-align: top
  margin-right: $marginRight
  margin-left: -4px
  &:first-child
    margin-left: 0
  &:last-child
    margin-right: 0

=fontFace($font)
  @font-face
    font-family: $font
    src: url("fonts/#{$font}.eot")
    src: url("fonts/#{$font}.eot?#iefix") format("embedded-opentype"), url("fonts/#{$font}.woff") format("woff"), url("fonts/#{$font}.ttf") format("truetype"), url("fonts/#{$font}.svg##{$font}") format("svg")
    font-weight: normal
    font-style: normal

=retina($width,$height)
  width: $width/2
  height: $height/2
  +background-size(100% 100%)

=circle($size)
  +wh($size)
  border-radius: 50%
  overflow: hidden

// Development Only - Flips background images - too heavy for the browser
// $i: 1
// =characterAnimation($animationName, $numberOfCells, $folderName)
//   +keyframes($animationName)
//     $percentageSteper: 100/$numberOfCells
//     0%
//       background-image: url(#{$imgPath + 'animations/' + $folderName + '-animation/' + 1 + '.png'})
//     @while $i <= $numberOfCells
//       $percentageStep: $i*$percentageSteper
//       #{$percentageStep + '%'}
//         background-image: url(#{$imgPath + 'animations/' + $folderName + '-animation/' + $i + '.png'})
//         $i: $i + 1
//     $i: 1

// Rules to attach to a class for a sprited animation
=spriteAnimtor( $widthofSingleCell, $heightofSingleCell, $spriteImage, $animationName, $cells, $timeSeconds, $iterationCount )
  width: $widthofSingleCell
  height: $heightofSingleCell

  @if $iterationCount == 1
    background: url(#{$imgPath + 'animations/' + '#{$spriteImage}.png'}) no-repeat
    +animation($animationName $timeSeconds steps(#{$cells - 1}) $iterationCount forwards normal)

  @if $iterationCount == infinite
    background: url(#{$imgPath + 'animations/' + '#{$spriteImage}.png'}) repeat
    +animation($animationName $timeSeconds steps(#{$cells}) $iterationCount forwards normal)

// Sprite animtion rule generator
=spriteAnimtionRule( $animationName, $spriteWidth, $widthofSingleCell, $iterationCount )
  +keyframes($animationName)
    @if $iterationCount == 1
      from
        background-position: 0px
      to
        background-position: -$spriteWidth + $widthofSingleCell     
    @if $iterationCount == infinite
      from
        background-position: 0px
      to
        background-position: -$spriteWidth


















